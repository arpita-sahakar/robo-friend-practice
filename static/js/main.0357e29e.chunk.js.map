{"version":3,"sources":["Header.jsx","SearchBox.jsx","RobotCards.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","SearchBox","props","className","type","onChange","searchChange","placeholder","aria-label","RobotCards","robotsF","map","rbt","i","src","id","alt","name","email","App","useState","robots","setRobots","search","setSearch","useEffect","axios","get","then","res","console","log","data","event","target","value","filter","robot","toLowerCase","indexOf","filteredRobots","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAUeA,MARf,WACI,OACI,8BACI,gD,MCqBGC,MAvBf,SAAmBC,GACjB,OACE,qBAAKC,UAAY,YAAjB,SACE,qBAAKA,UAAU,+BAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,uBAAMA,UAAU,SAAhB,UACE,uBACEA,UAAU,oBACVC,KAAK,SACLC,SAAUH,EAAMI,aAChBC,YAAY,SACZC,aAAW,WAEb,wBAAQL,UAAU,0BAA0BC,KAAK,SAAjD,8B,MCEGK,MAff,SAAoBP,GAClB,OAAOA,EAAMQ,QAAQC,KAAI,SAACC,EAAKC,GAC7B,OACE,qBAAKV,UAAU,iBAAf,SACE,sBAAKA,UAAU,YAAf,UAEE,qBAAKW,IAAG,+BAA0BF,EAAIG,IAAMC,IAAI,UAChD,oBAAIb,UAAU,aAAd,SAA4BS,EAAIK,OAChC,6BAAKL,EAAIM,YALwBL,O,iBCmC5BM,MAlCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,KAuBb,OAnBAC,qBAAU,WACRC,IAAMC,IAAI,6CAA6CC,MAAK,SAACC,GAC3DC,QAAQC,IAAI,aACZD,QAAQC,IAAIF,EAAIG,MAChBV,EAAUO,EAAIG,WAEf,IAcD,sBAAK7B,UAAU,aAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWG,aAdQ,SAAC2B,GACtBH,QAAQC,IAAIE,EAAMC,OAAOC,OACzBX,EAAUS,EAAMC,OAAOC,UAarB,cAAC,EAAD,CAAYzB,QAVO,SAACW,GACtB,OAAOA,EAAOe,QAAO,SAACC,GACpB,OAAOA,EAAMpB,KAAKqB,cAAcC,QAAQhB,EAAOe,gBAAkB,KAQ3CE,CAAenB,SCtB5BoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0357e29e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <h1>ROBOFRIENDS</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\r\nimport \"./search.css\";\r\n\r\nfunction SearchBox(props) {\r\n  return (\r\n    <div className = \"searchBox\">\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <div className=\"container-fluid\">\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              onChange={props.searchChange}\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            ></input>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./RobotCards.css\";\r\n\r\nfunction RobotCards(props) {\r\n  return props.robotsF.map((rbt, i) => {\r\n    return (\r\n      <div className=\"card cardRobot\" key={i}>\r\n        <div className=\"card-body\">\r\n          \r\n          <img src={`https://robohash.org/${rbt.id}`} alt=\"robot\"></img>\r\n          <h5 className=\"card-title\">{rbt.name}</h5>\r\n          <h6>{rbt.email}</h6>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nexport default RobotCards;\r\n","import \"./App.css\";\nimport Header from \"./Header\";\nimport SearchBox from \"./SearchBox\";\nimport RobotCards from \"./RobotCards\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [robots, setRobots] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    axios.get(\"http://jsonplaceholder.typicode.com/users\").then((res) => {\n      console.log(\"useEffect\");\n      console.log(res.data);\n      setRobots(res.data);\n    });\n  }, []);\n\n  const onSearchChange = (event)=>{\n    console.log(event.target.value);\n    setSearch(event.target.value);\n  }\n  \n  const filteredRobots = (robots) => {\n    return robots.filter((robot) => {\n      return robot.name.toLowerCase().indexOf(search.toLowerCase()) > -1;\n    });\n  };\n\n  return (\n    <div className=\"background\">\n      <Header />\n      <SearchBox searchChange={onSearchChange}/>\n      <RobotCards robotsF ={filteredRobots(robots)}  />\n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}